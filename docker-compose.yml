services:
  db:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    volumes:
      - postgres_data:/db/data
    env_file:
      - .env

  web:
    build:
      context: .
      dockerfile: Dockerfile
    command:
      [
        "gunicorn",
        "core.asgi:application",
        "-k",
        "uvicorn.workers.UvicornWorker",
        "-b",
        "0.0.0.0:8000",
        "--timeout",
        "40",
        "--capture-output",
      ]
    volumes:
      - ./src:/code/src
      - ./src/manage.py:/code/manage.py
      - static_volume:/code/static # Match STATIC_ROOT
      - media_volume:/code/media # Match MEDIA_ROOT
    depends_on:
      - db
      - redis
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`sejm-stats.pl`) && PathPrefix(`/api`)"
      - "traefik.http.services.django.loadbalancer.server.port=8000"

  frontend:
    build:
      context: ./frontend/
      dockerfile: Dockerfile.nextjs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`sejm-stats.pl`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
  traefik:
    image: traefik:v2.5
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=michalskibinski109@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  redis:
    image: redis:latest
  celery:
    build:
      context: .
      dockerfile: Dockerfile.celery
    command: ["celery", "-A", "core", "worker", "-l", "INFO"]
    volumes:
      - ./src:/code/src
      - ./src/manage.py:/code/manage.py
      - media_volume:/code/media # Match MEDIA_ROOT
    depends_on:
      - db
      - redis
      - web
    environment:
      - C_FORCE_ROOT=true
    env_file:
      - .env
    mem_limit: 2g
volumes:
  postgres_data:
  static_volume:
  media_volume: #  sudo docker compose down && sudo docker compose up --build
